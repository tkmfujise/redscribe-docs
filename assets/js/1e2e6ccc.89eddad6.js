"use strict";(self.webpackChunkredscribe_docs=self.webpackChunkredscribe_docs||[]).push([[937],{414:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/02.method_missing_output-7b9d33c9bef4a79707bd2ae3e0b502ec.png"},3180:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/02.method_missing-16888b5b69328a0d7b8e1e6f95ea3c38.png"},3938:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/02.create-a-new-scene-51bbd33896f7ff5f995703ed52789416.png"},4230:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/02.attach-a-gdscript-bb68345dd4595037dd880127d354cf59.png"},6087:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"hello","title":"Hello Ruby!","description":"Create a scene","source":"@site/docs/02.hello.md","sourceDirName":".","slug":"/hello","permalink":"/redscribe-docs/docs/hello","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Hello Ruby!"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/redscribe-docs/docs/installation"},"next":{"title":"Using REPL","permalink":"/redscribe-docs/docs/using_repl"}}');var r=s(4848),t=s(8453),d=s(4028);const c={sidebar_label:"Hello Ruby!"},l="Hello Ruby!",a={},o=[{value:"Create a scene",id:"create-a-scene",level:2},{value:"method_missing signal",id:"method_missing-signal",level:2},{value:"What happened?",id:"what-happened",level:3},{value:"1. extends Control",id:"1-extends-control",level:4},{value:"2. @onready var res := ReDScribe.new()",id:"2-onready-var-res--redscribenew",level:4},{value:"3. func _ready() -&gt; void:",id:"3-func-_ready---void",level:4},{value:"4. func _method_missing(method_name: String, args: Array) -&gt; void:",id:"4-func-_method_missingmethod_name-string-args-array---void",level:4},{value:"Architecture",id:"architecture",level:2},{value:"channel signal",id:"channel-signal",level:2},{value:"Type conversions",id:"type-conversions",level:2},{value:"Which signal should you use?",id:"which-signal-should-you-use",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"hello-ruby",children:"Hello Ruby!"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-scene",children:"Create a scene"}),"\n",(0,r.jsxs)(n.p,{children:["First, create a scene. Any node will work, but in this example, I'll create one using a ",(0,r.jsx)(n.strong,{children:"Control"})," node."]}),"\n",(0,r.jsx)(d.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Create a scene",src:s(3938).A+"",width:"1918",height:"1032"})})}),"\n",(0,r.jsx)(n.p,{children:"Next, attach a GDScript."}),"\n",(0,r.jsx)(d.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Attach a GDScript",src:s(4230).A+"",width:"1918",height:"1028"})})}),"\n",(0,r.jsx)(n.h2,{id:"method_missing-signal",children:"method_missing signal"}),"\n",(0,r.jsx)(n.p,{children:"Let's write the GDScript as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"extends Control\n\n@onready var res := ReDScribe.new()\n\n\nfunc _ready() -> void:\n\tres.method_missing.connect(_method_missing)\n\tres.perform(\"\"\"\n\t\tAlice says: 'Hello Ruby! \u2764'\n\t\"\"\")\n\n\nfunc _method_missing(method_name: String, args: Array) -> void:\n\tprint_debug('[method_missing] ', method_name, ': ', args)\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then run the scene."}),"\n",(0,r.jsx)(d.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"method_missing signal",src:s(3180).A+"",width:"1918",height:"1030"})})}),"\n",(0,r.jsxs)(n.p,{children:["When you run it, you'll see the following output in the ",(0,r.jsx)(n.strong,{children:"Output"})," panel:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[method_missing] Alice: [{ &"says": "Hello Ruby! \u2764" }]\n   At: res://control.gd:14:_method_missing()\n'})}),"\n",(0,r.jsx)(d.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"method_missing example output",src:s(414).A+"",width:"1368",height:"252"})})}),"\n",(0,r.jsx)(n.h3,{id:"what-happened",children:"What happened?"}),"\n",(0,r.jsx)(n.p,{children:"Let me explain each one."}),"\n",(0,r.jsx)(n.h4,{id:"1-extends-control",children:"1. extends Control"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"extends Control\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This scene inherits the ",(0,r.jsx)(n.strong,{children:"Control"})," node.\r\nThis statement has nothing to do with ReDScribe processing."]}),"\n",(0,r.jsx)(n.h4,{id:"2-onready-var-res--redscribenew",children:"2. @onready var res := ReDScribe.new()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"@onready var res := ReDScribe.new()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["An instance of ReDScribe is created and assinged to the ",(0,r.jsx)(n.code,{children:"res"})," variable.\nIn Godot, member variables used within a node are defined at the beginning like this."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@onready"})," modifier causes this to be called when the scene in the ",(0,r.jsx)(n.strong,{children:"ready"})," state, i.e. when the node and its children have entered the scene tree. This is often used to initialize member variables."]}),"\n",(0,r.jsx)(n.h4,{id:"3-func-_ready---void",children:"3. func _ready() -> void:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:'func _ready() -> void:\n\tres.method_missing.connect(_method_missing)\n\tres.perform("""\n\t\tAlice says: \'Hello Ruby! \u2764\'\n\t""")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"_method_missing"})," function is set up to receive ReDScribe's ",(0,r.jsx)(n.strong,{children:"method_missing"})," signal."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"res.perform"})," runs Ruby code."]}),"\n",(0,r.jsx)(n.h4,{id:"4-func-_method_missingmethod_name-string-args-array---void",children:"4. func _method_missing(method_name: String, args: Array) -> void:"}),"\n",(0,r.jsxs)(n.p,{children:["If you run the following in Ruby, Ruby will interpret it as passing the argument ",(0,r.jsx)(n.code,{children:"says: 'Hello Ruby! \u2764'"})," to the ",(0,r.jsx)(n.code,{children:"Alice"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"Alice says: 'Hello Ruby! \u2764'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since there is no method named ",(0,r.jsx)(n.code,{children:"Alice"})," defined in Ruby, a ",(0,r.jsx)(n.strong,{children:"method_missing"})," error occurs, but ReDScribe emits a signal when ",(0,r.jsx)(n.strong,{children:"method_missing"})," occurs."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"_method_missing"})," function now receives the ",(0,r.jsx)(n.strong,{children:"method_missing"})," singal."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"func _method_missing(method_name: String, args: Array) -> void:\n\tprint_debug('[method_missing] ', method_name, ': ', args)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So, the output was displayed in the ",(0,r.jsx)(n.strong,{children:"Output"})," panel as shown below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[method_missing] Alice: [{ &"says": "Hello Ruby! \u2764" }]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["ReDScribe creates an mruby execution unit called ",(0,r.jsx)(n.strong,{children:"mrb_state"})," for each instance.\nTherefore, the namespace is clsoed for each instance.\nCreate a ReDScribe instance for the unit where you want to write DSL."]}),"\n",(0,r.jsx)(d.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Architecture",src:s(9064).A+"",width:"847",height:"481"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Object#method_missing"})," emits the ",(0,r.jsx)(n.strong,{children:"method_missing"})," signal, but it can also emit a ",(0,r.jsx)(n.strong,{children:"channel"})," signal using ",(0,r.jsx)(n.strong,{children:"Godot.emit_signal"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"channel-signal",children:"channel signal"}),"\n",(0,r.jsx)(n.p,{children:"Try rewriting the GDScript as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"extends Control\n\n@onready var res := ReDScribe.new()\n\n\nfunc _ready() -> void:\n\tres.method_missing.connect(_method_missing)\n\tres.channel.connect(_subscribe) # Added\n\tres.perform(\"\"\"\n\t\tAlice says: 'Hello Ruby! \u2764'\n\n\t\t# Added\n\t\tputs \"Welcome to the world of Ruby v#{RUBY_VERSION}, powered by #{RUBY_ENGINE} \ud83d\udc8e\"\n\n\t\t# Added\n\t\tGodot.emit_signal :spawn, { name: 'Alice', job: :wizard, level: 1 }\n\t\"\"\")\n\n\nfunc _method_missing(method_name: String, args: Array) -> void:\n\tprint_debug('[method_missing] ', method_name, ': ', args)\n\n\n# Added\nfunc _subscribe(key: StringName, payload: Variant) -> void:\n\tprint_debug('[subscribe] ', key, ': ', payload)\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The following should appear in the ",(0,r.jsx)(n.strong,{children:"Output"})," panel."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[method_missing] Alice: [{ &"says": "Hello Ruby! \u2764" }]\r\n   At: res://control.gd:19:_method_missing()\r\nWelcome to the world of Ruby v3.4, powered by mruby \ud83d\udc8e\r\n[subscribe] spawn: { &"name": "Alice", &"job": &"wizard", &"level": 1 }\r\n   At: res://control.gd:23:_subscribe()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["By executing ",(0,r.jsx)(n.code,{children:"Godot.emit_signal"}),", a ",(0,r.jsx)(n.strong,{children:"channel"})," signal was emitted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"Godot.emit_signal :spawn, { name: 'Alice', job: :wizard, level: 1 }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The emitted signal is received by the ",(0,r.jsx)(n.code,{children:"_subscribe(key: StringName, payload: Variant)"})," function."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The first argument ",(0,r.jsx)(n.code,{children:":spawn"})," is ",(0,r.jsx)(n.code,{children:"key"})]}),"\n",(0,r.jsxs)(n.li,{children:["The second argument ",(0,r.jsx)(n.code,{children:"{ name: 'Alice', job: :wizard, level: 1 }"})," is ",(0,r.jsx)(n.code,{children:"payload"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In Ruby, ",(0,r.jsx)(n.code,{children:":spwan"})," is a Symbol class, but when received by GDScript it becomes a StringName type."]}),"\n",(0,r.jsx)(n.p,{children:"The GDScript Variant type is a type that represents any type. Use this type when you want to process any data that is passed to to."}),"\n",(0,r.jsx)(n.h2,{id:"type-conversions",children:"Type conversions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"perform"})," executes Ruby (mruby) code, and the data passed via the ",(0,r.jsx)(n.strong,{children:"method_missing"})," or ",(0,r.jsx)(n.strong,{children:"channel"})," signals is converted to GDScript types as follows:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"mruby"}),(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{children:"GDScript"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"nil"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"null"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Float"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"float"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"int"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Symbol"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"StringName"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Hash"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"Dictionary"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Array"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"Array"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Range"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"Array"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Time"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsx)(n.td,{children:"Dictionary"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"(Others)"}),(0,r.jsx)(n.td,{children:"\u21d2"}),(0,r.jsxs)(n.td,{children:["String",(0,r.jsx)("br",{}),"(#inspect called)"]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"which-signal-should-you-use",children:"Which signal should you use?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"Alice says: 'Hello Ruby! \u2764'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you want to receive the ",(0,r.jsx)(n.strong,{children:"channel"})," signal instead of ",(0,r.jsx)(n.strong,{children:"method_missing"}),", you can write it as follows."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",children:"extends Control\r\n\r\n@onready var res := ReDScribe.new()\r\n\r\n\r\nfunc _ready() -> void:\r\n\tres.channel.connect(_subscribe)\r\n\tres.perform(\"\"\"\r\n\t\tdef Alice(**args)\r\n\t\t  Godot.emit_signal :action, { name: 'Alice', **args }\r\n\t\tend\r\n\r\n\t\tAlice says: 'Hello Ruby! \u2764'\r\n\t\"\"\")\r\n\r\n\r\nfunc _subscribe(key: StringName, payload: Variant) -> void:\r\n\tprint_debug('[subscribe] ', key, ': ', payload)\r\n\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[subscribe] action: { &"name": "Alice", &"says": "Hello Ruby! \u2764" }\n   At: res://control.gd:18:_subscribe()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["I defined an ",(0,r.jsx)(n.code,{children:"Alice"})," method that internally calls ",(0,r.jsx)(n.code,{children:"Godot.emit_signal"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"def Alice(**args)\n  Godot.emit_signal :action, { name: 'Alice', **args }\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you'd like to use ",(0,r.jsx)(n.strong,{children:"channel"})," signals, you'll need to know a bit more about Ruby."]}),"\n",(0,r.jsxs)(n.p,{children:["For casual use, try the ",(0,r.jsx)(n.strong,{children:"method_missing"})," signal.\nIf you're looking to implement more advanced behavior, consider using ",(0,r.jsx)(n.strong,{children:"channel"})," signal instead."]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}},9064:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/architecture-3236afac360de3d356e379514ae04867.png"}}]);