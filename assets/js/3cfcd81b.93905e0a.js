"use strict";(self.webpackChunkredscribe_docs=self.webpackChunkredscribe_docs||[]).push([[5201],{809:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.create-a-scene-e36cb2f67c2206e231223cab5789ed20.png"},2356:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.add-choices-964f2a28ed81768f5a9a06a186af4751.png"},4414:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.set-speaker-4f131cb89af5c6acb1c2fdcb48284b9a.png"},6017:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.attach-a-boot-file-79e89b9f16d96d7a591658b4b9ae5910.png"},6393:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.speaker-scene-16ed60acb252bbd513c445764c44c635.png"},7296:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.instantiate-a-speaker-419abd232282cbd5cd68d38bc43efee0.png"},7548:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/08.create-button-template-c2e4aaf0319e4b401fdf19e1d3550383.png"},7747:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"example2_dialogue","title":"Example 2: Dialogue Controller","description":"We\u2019ll create a dialogue controller like the one shown below. Let\u2019s experience the process together as we gradually add DSL syntax step by step.","source":"@site/docs/08.example2_dialogue.md","sourceDirName":".","slug":"/example2_dialogue","permalink":"/redscribe-docs/docs/example2_dialogue","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_label":"Example 2: Dialogue Controller"},"sidebar":"tutorialSidebar","previous":{"title":"Using Fiber","permalink":"/redscribe-docs/docs/using_fiber"}}');var r=t(4848),s=t(8453),i=t(4028);const l={sidebar_label:"Example 2: Dialogue Controller"},o="Example 2: Dialogue Controller",d={},c=[{value:"Create a Scene",id:"create-a-scene",level:2},{value:"Designing the DSL",id:"designing-the-dsl",level:2},{value:"Striving for Readability",id:"striving-for-readability",level:3},{value:"Defining via Method Calls",id:"defining-via-method-calls",level:4},{value:"Defining with Blocks",id:"defining-with-blocks",level:4},{value:"Using <strong>const_missing</strong>",id:"using-const_missing",level:4},{value:"Creating a Helper to Run the DSL",id:"creating-a-helper-to-run-the-dsl",level:3},{value:"Attach a GDScript",id:"attach-a-gdscript",level:2},{value:"Create a Scenario (Ver. 1)",id:"create-a-scenario-ver-1",level:2},{value:"Controlling Character Expressions",id:"controlling-character-expressions",level:2},{value:"Create the Speaker Scene",id:"create-the-speaker-scene",level:3},{value:"Add to the Dialogue Scene",id:"add-to-the-dialogue-scene",level:3},{value:"Update the Scenario (Ver. 2)",id:"update-the-scenario-ver-2",level:3},{value:"Update the GDScript",id:"update-the-gdscript",level:3},{value:"Displaying Choices",id:"displaying-choices",level:2},{value:"Update the Scenario (Ver. 3)",id:"update-the-scenario-ver-3",level:3},{value:"Update the Dialogue Scene",id:"update-the-dialogue-scene",level:3},{value:"Update the GDScript",id:"update-the-gdscript-1",level:3},{value:"Changing Background Image or BGM",id:"changing-background-image-or-bgm",level:2},{value:"Update the Scenario (Ver. 4)",id:"update-the-scenario-ver-4",level:3},{value:"Update the GDScript",id:"update-the-gdscript-2",level:3},{value:"Refining the DSL",id:"refining-the-dsl",level:2},{value:"Update the Scenario (Ver. 5)",id:"update-the-scenario-ver-5",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"example-2-dialogue-controller",children:"Example 2: Dialogue Controller"})}),"\n",(0,r.jsx)(n.p,{children:"We\u2019ll create a dialogue controller like the one shown below. Let\u2019s experience the process together as we gradually add DSL syntax step by step."}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/5CELwG9aVQk?si=AyVAydO_K6CgJvHM",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,r.jsx)(n.h2,{id:"create-a-scene",children:"Create a Scene"}),"\n",(0,r.jsxs)(n.p,{children:["First, create a scene with a ",(0,r.jsx)(n.strong,{children:"Control"})," node named ",(0,r.jsx)(n.code,{children:"Dialogue"}),".\nThen, add child nodes so that the scene tree looks like the example below."]}),"\n",(0,r.jsxs)(n.p,{children:["Ensure that ",(0,r.jsx)(n.code,{children:"Content"})," and ",(0,r.jsx)(n.code,{children:"Button"})," are accessible by their unique node names."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Node tree"',children:"Dialogue <Control Node>\n  \u251c ColorRect\n  \u251c Content <RichTextLabel Node>\n  \u2514 Button\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Resize the ",(0,r.jsx)(n.code,{children:"ColorRect"})," to act as the dialog frame, and add the ",(0,r.jsx)(n.code,{children:"Content"})," within it.\nNext, place the ",(0,r.jsx)(n.code,{children:"Button"})," beneath the frame."]}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Create a scene",src:t(809).A+"",width:"1918",height:"1028"})})}),"\n",(0,r.jsxs)(n.p,{children:["If the text looks too small, try adjusting the ",(0,r.jsx)(n.strong,{children:"Font Size"})," from the Inspector."]}),"\n",(0,r.jsx)(n.h2,{id:"designing-the-dsl",children:"Designing the DSL"}),"\n",(0,r.jsxs)(n.p,{children:["Let's explore a DSL for displaying dialogue content within the ",(0,r.jsx)(n.code,{children:"Content"})," node of the scene we created.\nIdeally, it should offer the readability and ease of use of plain text."]}),"\n",(0,r.jsx)(n.h3,{id:"striving-for-readability",children:"Striving for Readability"}),"\n",(0,r.jsxs)(n.p,{children:["Since we want the lines to be easy to read aloud, we aim for a format like: ",(0,r.jsx)(n.code,{children:'(Character) say "(Line)"'})]}),"\n",(0,r.jsx)(n.p,{children:"This structure feels natural and expressive."}),"\n",(0,r.jsx)(n.p,{children:"How should we define this?"}),"\n",(0,r.jsx)(n.h4,{id:"defining-via-method-calls",children:"Defining via Method Calls"}),"\n",(0,r.jsx)(n.p,{children:"Let's begin with a simple approach: using method calls with keyword-style arguments."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Alice says: "I love Ruby."\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is beautifully\u2015just one line, with clarity and elegance."}),"\n",(0,r.jsxs)(n.p,{children:["However, if we continue writing this way, the alignment of ",(0,r.jsx)(n.code,{children:"says"})," can become uneven depending on the length of character names, which slightly affects readability.\nAlso, when the same character speaks multiple times in sucession, the repetition can feel verbose."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Alice says: "I love Ruby."\nBenjamin says: "I love Ruby too."\nBenjamin says: "I also love Godot."\n'})}),"\n",(0,r.jsx)(n.h4,{id:"defining-with-blocks",children:"Defining with Blocks"}),"\n",(0,r.jsx)(n.p,{children:"Next, let's consider using blocks."}),"\n",(0,r.jsxs)(n.p,{children:["Since the character names is followed by a line break, the position of ",(0,r.jsx)(n.code,{children:"says"})," remains aligned.\nThis also avoids redundancy when the same character speaks multiple times."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Alice do\n  says "I love Ruby."\nend\n\nBenjamin do\n  says "I love Ruby too."\n  says "I also love Godot."\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["However, the extra line required for ",(0,r.jsx)(n.code,{children:"end"})," feels a bit distracting."]}),"\n",(0,r.jsx)(n.p,{children:"What we're aiming for is a DSL that allows dialogue to flow naturally from top to bottom\u2015spoken lines by characters, readable and writable like a gentle stream.\nSo ideally, we'd like to omit any unnecessary lines."}),"\n",(0,r.jsxs)(n.h4,{id:"using-const_missing",children:["Using ",(0,r.jsx)(n.strong,{children:"const_missing"})]}),"\n",(0,r.jsxs)(n.p,{children:["Is it possible to remove the ",(0,r.jsx)(n.code,{children:"end"})," lines from the code above and still make it work?\nAfter some thought, it seems feasible with the following structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'Alice;\n  says "I love Ruby."\n\nBenjamin;\n  says "I love Ruby too."\n  says "I also love Godot."\n'})}),"\n",(0,r.jsxs)(n.p,{children:["By treating character names as constants rather than methods, and leveraging metaprogramming via ",(0,r.jsx)(n.strong,{children:"const_missing"}),", we can eliminate the extra ",(0,r.jsx)(n.code,{children:"end"})," lines."]}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-helper-to-run-the-dsl",children:"Creating a Helper to Run the DSL"}),"\n",(0,r.jsxs)(n.p,{children:["Let's write the code needed to run the DSL above.\nSave the following code as a ",(0,r.jsx)(n.code,{children:"helper.rb"})," file in the same directory as the scene."]}),"\n",(0,r.jsx)(n.p,{children:"I ended up suing a mix of metaprogramming techniques\u2015but all in service of bringing the ideal DSL to life."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="helper.rb"',children:'# = Redirects method calls to Xxx.current\r\n#\r\n#   `delegate Foo, :bar` means calling `bar` will forward to `Foo.current.bar`\r\n#\r\ndef delegate(const, *keys)\r\n  keys.each do |key|\r\n    define_method(key) do |*args|\r\n      const.current.send(key, *args)\r\n    end\r\n  end\r\nend\r\n\r\n\r\nclass Dialogue\r\n  class << self\r\n    attr_accessor :current\r\n  end\r\n\r\n  attr_accessor :fiber\r\n\r\n  def initialize(&block)\r\n    self.fiber = Fiber.new do\r\n      yield\r\n      Godot.emit_signal :finished, true\r\n    end\r\n    Dialogue.current = self\r\n  end\r\n\r\n  def continue(val = nil)\r\n    fiber.resume(val)\r\n  end\n\n  def listen!\n    Fiber.yield\n  end\r\nend\r\ndelegate Dialogue, :continue #\r\n\r\n\r\nclass Speaker\r\n  class << self\r\n    attr_accessor :all, :current\r\n  end\r\n  self.all = []\r\n\r\n  attr_accessor :name\r\n\r\n  def initialize(name)\r\n    self.name = name\r\n    Speaker.all << self\r\n  end\r\n\r\n  def says(str)\r\n    emit :says, { content: str }\r\n    Dialogue.current.listen!\n  end\r\n\r\n  private\r\n    def emit(key, args = {})\r\n      Godot.emit_signal key, { name: name, **args }\r\n    end\r\nend\r\ndelegate Speaker, :says #\r\n\r\n\r\n# = const_missing\r\n#\r\n#   `Alice;` sets `Speaker.current` to the Speaker instance named "Alice"\r\n#\r\ndef Object.const_missing(name)\r\n  speaker = Speaker.all.find{|s| s.name == name.to_s }\r\n  if speaker\r\n    Speaker.current = speaker\r\n  else\r\n    super\r\n  end\r\nend\r\n\r\n\r\ndef speakers(names)\r\n  names.each{|name| Speaker.new(name) }\r\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"Once you've saved the file, try running the following in the REPL:"}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["You'll need to specify the path to the file you just created in ",(0,r.jsx)(n.code,{children:"require 'path/to/helper'"}),".\nIf typing it out feels tedious, you can simply drag and drop the Ruby file from the FileSystem into the REPL input field."]}),(0,r.jsxs)(n.p,{children:["This will automatically insert the correct ",(0,r.jsx)(n.code,{children:"require 'path/to/helper'"})," line.\nThis feature works not only in the REPL, but alos in the Editor."]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'path/to/helper\'\n\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n    says "One sunny afternoon,"\n    says "Alice met the White Rabbit"\n\n  Alice;\n    says "Hi! I\'m Alice. I\'m curious!"\n\n  WhiteRabbit;\n    says "Hi, I\'m late. I\'m busy."\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Output"',children:'=> "#<Dialogue:0x177babf47d0 @fiber=#<Fiber:0x177babf46e0 (created)>>"\r\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Fiber was successfully created without any errors."}),"\n",(0,r.jsx)(n.p,{children:"Next, run the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"continue\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Output"',children:'[ says ] signal emitted: { &"name": "Narrator", &"content": "One sunny afternoon," }\r\n=> <null>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["A signal with the key ",(0,r.jsx)(n.code,{children:"says"})," was emitted.\nThe ",(0,r.jsx)(n.code,{children:"content"})," was correctly assigned to the corresponding ",(0,r.jsx)(n.code,{children:"name"}),".\nIt looks like everything is working smoothly."]}),"\n",(0,r.jsxs)(n.p,{children:["Now, go ahead and run ",(0,r.jsx)(n.code,{children:"continue"})," four more times."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Output"',children:'[ says ] signal emitted: { &"name": "Narrator", &"content": "Alice met the White Rabbit" }\r\n=> <null>\n\n[ says ] signal emitted: { &"name": "Alice", &"content": "Hi! I\\\'m Alice. I\\\'m curious!" }\r\n=> <null>\n\n[ says ] signal emitted: { &"name": "WhiteRabbit", &"content": "Hi, I\\\'m late. I\\\'m busy." }\n=> <null>\n\n[ finished ] signal emitted: true\n=> true\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.code,{children:"name"})," was correctly paired with the expected ",(0,r.jsx)(n.code,{children:"content"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Finally, we can see that a signal with the key ",(0,r.jsx)(n.code,{children:"finished"})," was emitted, indicating that everything has completed."]}),"\n",(0,r.jsxs)(n.p,{children:["So what happens if we call ",(0,r.jsx)(n.code,{children:"continue"})," again after it's already finished?\nThe answer: it results in an error."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Output"',children:"Error: resuming dead fiber (FiberError)\n"})}),"\n",(0,r.jsx)(n.p,{children:"A Fiber maintains its own state to indicate whether it has finished."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"Dialogue.current.fiber\n\nDialogue.current.fiber.alive?\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Output"',children:'=> "#<Fiber:0x177babf46e0 (terminated)>"\r\r\n\n=> false\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When working with Fiber, you can either handle its state using the methods above, or \u2015like in this example\u2015emit a signal at the end of the ",(0,r.jsx)(n.code,{children:"Fiber.new do ... end"})," blocks to avoid errors."]}),"\n",(0,r.jsx)(n.h2,{id:"attach-a-gdscript",children:"Attach a GDScript"}),"\n",(0,r.jsxs)(n.p,{children:["Now that the DSL syntax and the structure of the emitted signals are defined, let's write the logic for the ",(0,r.jsx)(n.code,{children:"Dialogue"})," scene."]}),"\n",(0,r.jsx)(n.p,{children:"Attach the following GDScript to the scene:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",metastring:'title="dialogue.gd"',children:"extends Control\r\n\r\n@export var controller : ReDScribe\r\n\r\n\r\nfunc _ready() -> void:\r\n\tcontroller.channel.connect(_handle)\r\n\t%Button.pressed.connect(continue_dialogue)\r\n\tclear()\r\n\r\n\r\nfunc speak(speaker: String, content: String) -> void:\r\n\t%Content.text = \"(%s)\\n%s\" % [speaker, content]\r\n\r\n\r\nfunc continue_dialogue() -> void:\r\n\tcontroller.perform('continue')\r\n\r\n\r\nfunc clear(all: bool = false) -> void:\r\n\t%Content.text = ''\r\n\tif all: %Button.hide()\r\n\r\n\r\nfunc _handle(key: StringName, payload: Variant) -> void:\r\n\tmatch key:\r\n\t\t&'says': speak(payload['name'], payload['content'])\r\n\t\t&'finished': clear(true)\r\n\t\t_: print_debug('[%s] %s', [key, payload])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-scenario-ver-1",children:"Create a Scenario (Ver. 1)"}),"\n",(0,r.jsxs)(n.p,{children:["Everything's ready.\nLet's write the conversation script and save it as ",(0,r.jsx)(n.code,{children:"scenario.rb"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You might not even realize this is written in programming language\u2015but that's the magic of Ruby's flexibility."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="scenario.rb"',children:'require \'path/to/helper\'\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n    says "Alice is resting in the field."\n    says "Suddenly, she hears a panicked voice from afar."\n\n  WhiteRabbit;\n    says "I\'m late, I\'m late, I\'m late!"\n\n  Alice;\n    says "Hi! Where are you going?"\n\n  WhiteRabbit;\n    says "I\'m late, I\'m late, for a very important date!"\n\n  Alice;\n    says "Wait!"\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Click the ",(0,r.jsx)(n.strong,{children:"Controller"})," property in the Inspector and select ",(0,r.jsx)(n.strong,{children:"New ReDScribe"}),"."]}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"New ReDScribe",src:t(6017).A+"",width:"270",height:"288"})})}),"\n",(0,r.jsxs)(n.p,{children:["Set the ",(0,r.jsx)(n.code,{children:"scenario.rb"})," file you created as the ",(0,r.jsx)(n.strong,{children:"Boot File"}),", then run the scene."]}),"\n",(0,r.jsx)(n.p,{children:"Did the conversation dialogue appear as shown in the video below?"}),"\n",(0,r.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/U1cxs661ChQ?si=x17hhq2qSzrFsUxr",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.p,{children:["If you found this step difficult, the demo project is available on the following GitHub repository. Feel free to check it out:\n",(0,r.jsx)(n.a,{href:"https://github.com/tkmfujise/redscribe-docs-demo",children:"https://github.com/tkmfujise/redscribe-docs-demo"})]}),"\n",(0,r.jsx)(n.h2,{id:"controlling-character-expressions",children:"Controlling Character Expressions"}),"\n",(0,r.jsx)(n.p,{children:"You've built the foundation of the conversation dialogue. Next, let's display face graphics within the dialogue."}),"\n",(0,r.jsx)(n.h3,{id:"create-the-speaker-scene",children:"Create the Speaker Scene"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new scene named ",(0,r.jsx)(n.code,{children:"Speaker"})," to handle face graphics."]}),"\n",(0,r.jsxs)(n.p,{children:["Start with a ",(0,r.jsx)(n.strong,{children:"Sprite2D"})," node, and assign a 2x2 tile image that includes both the default and flustered expressions.\n(If you'd like to use the same image as the sample, you can ",(0,r.jsx)(n.a,{href:"https://github.com/tkmfujise/redscribe-docs-demo/blob/main/assets/Speakers.png",children:"download it here"}),".)"]}),"\n",(0,r.jsxs)(n.p,{children:["Set ",(0,r.jsx)(n.strong,{children:"HFrames"})," and ",(0,r.jsx)(n.strong,{children:"VFrames"}),' to "2".']}),"\n",(0,r.jsxs)(n.p,{children:["We'll use ",(0,r.jsx)(n.strong,{children:"Frame Coords"})," to control which character and expression are shown."]}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Speaker scene",src:t(6393).A+"",width:"1916",height:"1030"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",metastring:'title="speaker.gd"',children:"extends Sprite2D\nclass_name Speaker\n\nenum Name { Alice, WhiteRabbit }\nenum Face { DEFAULT, FLUSTERED }\n\n@export var speaker_name : Name : set = set_speaker\n@export var face : Face : set = set_face\n\n\nfunc set_speaker(val: int) -> void:\n\tframe_coords.y = val\n\tspeaker_name = val\n\n\nfunc set_face(val: int) -> void:\n\tframe_coords.x = val\n\tface = val\n"})}),"\n",(0,r.jsx)(n.h3,{id:"add-to-the-dialogue-scene",children:"Add to the Dialogue Scene"}),"\n",(0,r.jsxs)(n.p,{children:["Add the ",(0,r.jsx)(n.code,{children:"Speaker"})," scene to the ",(0,r.jsx)(n.code,{children:"Dialogue"})," scene and position it within the dialogue frame."]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure ",(0,r.jsx)(n.code,{children:"Speaker"})," can be accessed by its unique name."]}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Add the Speaker scene",src:t(7296).A+"",width:"1034",height:"592"})})}),"\n",(0,r.jsx)(n.p,{children:"Before modifying the GDScript, let's consider how to update the DSL."}),"\n",(0,r.jsx)(n.h3,{id:"update-the-scenario-ver-2",children:"Update the Scenario (Ver. 2)"}),"\n",(0,r.jsx)(n.p,{children:"We'll extend the DSL with syntax to control character expression."}),"\n",(0,r.jsx)(n.p,{children:"To do this, we'll define two methods: one for temporarily changing a charater's expression, and one for changing it persitently."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Someone; with :some_face"})," sets the expression until the next speaker speaks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Someone; got :some_face"})," sets the expression persitently until another expression is assigned."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="scenario.rb"',children:'require \'path/to/helper\'\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n    says "Alice is resting in the field."\n    says "Suddenly, she hears a panicked voice from afar."\n\n  WhiteRabbit; got :flustered\n    says "I\'m late, I\'m late, I\'m late!"\n\n  Alice;\n    says "Hi! Where are you going?"\n\n  WhiteRabbit;\n    says "I\'m late, I\'m late, for a very important date!"\n\n  Alice; with :flustered\n    says "Wait!"\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Enable calls to ",(0,r.jsx)(n.code,{children:"with"})," and ",(0,r.jsx)(n.code,{children:"got"}),", and update the signal to include ",(0,r.jsx)(n.code,{children:"face"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="helper.rb"',children:"class Speaker\n  class << self\n    attr_accessor :all, :current\n\n    def current=(speaker)\n      current.temporary_face = nil if current\n      @current = speaker\n    end\n  end\n  self.all = []\n\n  attr_accessor :name, :temporary_face, :permanent_face\n\n  def initialize(name)\n    self.name = name\n    self.permanent_face = ''\n    Speaker.all << self\n  end\n\n  def says(str)\n    emit :says, { content: str }\n  end\n\n  def with(face)\n    self.permanent_face = ''\n    self.temporary_face = face.to_s\n  end\n\n  def got(face)\n    self.permanent_face = face.to_s\n  end\n\n  def face\n    temporary_face || permanent_face\n  end\n\n  private\n    def emit(key, args = {})\n      Godot.emit_signal key, { name: name, face: face, **args }\n    end\nend\ndelegate Speaker, :says, :with, :got #\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update-the-gdscript",children:"Update the GDScript"}),"\n",(0,r.jsx)(n.p,{children:"Now that the DSL syntax and the shape of the emitted signals are defined, let's update the logic in the Dialogue scene."}),"\n",(0,r.jsxs)(n.p,{children:["We'll modify the ",(0,r.jsx)(n.code,{children:"speak"})," method to change the face graphic."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",metastring:'title="dialogue.gd"',children:"func speak(speaker: String, content: String, face: String) -> void:\n\t%Content.text = \"(%s)\\n%s\" % [speaker, content]\n\tset_speaker(speaker)\n\tset_face(face)\n\n\nfunc set_speaker(speaker: String) -> void:\r\n\t%Speaker.show()\r\n\tmatch speaker:\r\n\t\t'Alice':       %Speaker.speaker_name = Speaker.Name.Alice\r\n\t\t'WhiteRabbit': %Speaker.speaker_name = Speaker.Name.WhiteRabbit\r\n\t\t_: %Speaker.hide()\r\n\r\n\r\nfunc set_face(face: String) -> void:\r\n\tmatch face:\r\n\t\t'flustered': %Speaker.face = Speaker.Face.FLUSTERED\r\n\t\t_: %Speaker.face = Speaker.Face.DEFAULT\n\n\nfunc clear(all: bool = false) -> void:\n\t%Speaker.hide()\n\t%Content.text = ''\n\tif all: %Buttons.hide()\n\n\nfunc _handle(key: StringName, payload: Variant) -> void:\n\tmatch key:\n\t\t&'says':\n\t\t\tspeak(payload['name'], payload['content'], payload['face'])\n\t\t&'finished': clear(true)\n\t\t_: print_debug('[%s] %s', [key, payload])\n"})}),"\n",(0,r.jsx)(n.p,{children:"Try running it. If the face graphic switches correctly, you're good to go!"}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Switching the face graphic",src:t(4414).A+"",width:"660",height:"394"})})}),"\n",(0,r.jsx)(n.h2,{id:"displaying-choices",children:"Displaying Choices"}),"\n",(0,r.jsx)(n.p,{children:"Let's add the ability to show choices during the dialogue."}),"\n",(0,r.jsx)(n.h3,{id:"update-the-scenario-ver-3",children:"Update the Scenario (Ver. 3)"}),"\n",(0,r.jsx)(n.p,{children:"We'll extend the DSL to support displaying choices."}),"\n",(0,r.jsx)(n.p,{children:"The idea is to define a method for showing choices and another for retrieving the selected value:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'asks "(line)"'})," will display the dialogue line along with a set of choices."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"___?"})," will retrieve the value selected by the user."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="scenario.rb"',children:'require \'path/to/helper\'\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n    says "Alice is resting in the field."\n    says "Suddenly, she hears a panicked voice from afar."\n\n  WhiteRabbit; got :flustered\n    says "I\'m late, I\'m late, I\'m late!"\n\n  Alice;\n    says "Hi! Where are you going?"\n\n  WhiteRabbit;\n    says "I\'m late, I\'m late, for a very important date!"\n\n  Alice; with :flustered\n    says "Wait!"\n\n  Narrator;\n    says "Alice chased after the rabbit."\n    says "But the rabbit disappeared into a burrow."\n\n  Alice;\r\n    says "He went in here."\r\n    asks "Should I go in too?"\r\n    unless ___?\r\n      says "It looks so narrow and grimy... I really shouldn\'t."\r\n      until ___?\r\n        says "But I just can\'t stop wondering."\r\n        asks "Maybe I should go in after all?"\r\n      end\r\n    end\r\n    says "Alright, here goes!"\n\n  Narrator;\n    says "As Alice entered the burrow, the ground gave away and she fell down."\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["How do you feel about it? Everyone experiences if differently, of course, but I personally enjoy the snappy contrast between ",(0,r.jsx)(n.code,{children:"says"})," and ",(0,r.jsx)(n.code,{children:"asks"}),", and the way ",(0,r.jsx)(n.code,{children:"___?"})," feels like filling in a blank\u2014it's quite satisfying."]}),"\n",(0,r.jsxs)(n.p,{children:["We'll enable support for calling ",(0,r.jsx)(n.code,{children:"asks"})," and ",(0,r.jsx)(n.code,{children:"___?"}),", and update the signal to include ",(0,r.jsx)(n.code,{children:"choices"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="helper.rb"',children:"class Dialogue\n  class << self\n    attr_accessor :current\n  end\n\n  attr_accessor :fiber, :last_value\n\n  def initialize(&block)\n    self.fiber = Fiber.new do\n      yield\n      Godot.emit_signal :finished, true\n    end\n    Dialogue.current = self\n  end\n\n  def continue(val = nil)\n    fiber.resume(val)\n  end\n\n  def listen!\n    self.last_value = Fiber.yield\n  end\n\n  def ___?\n    last_value\n  end\nend\ndelegate Dialogue, :continue, :___? #\n\n\nclass Speaker\n  class << self\n    attr_accessor :all, :current\n\n    def current=(speaker)\n      current.temporary_face = nil if current\n      @current = speaker\n    end\n  end\n  self.all = []\n\n  attr_accessor :name, :temporary_face, :permanent_face\n\n  def initialize(name)\n    self.name = name\n    self.permanent_face = ''\n    Speaker.all << self\n  end\n\n  def says(str)\n    communicate :says, str\n  end\n\n  def asks(str, choices = { 'Yes' => true, 'No' => false })\n    communicate :asks, str, choices\n  end\n\n  def with(face)\n    self.permanent_face = ''\n    self.temporary_face = face.to_s\n  end\n\n  def got(face)\n    self.permanent_face = face.to_s\n  end\n\n  def face\n    temporary_face || permanent_face\n  end\n\n  private\n    def emit(key, args = {})\n      Godot.emit_signal key, { name: name, face: face, **args }\n    end\n\n    def communicate(key, str, choices = {})\n      emit key, { content: str, choices: choices }\n      Dialogue.current.listen!\n    end\nend\ndelegate Speaker, :says, :asks, :with, :got #\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update-the-dialogue-scene",children:"Update the Dialogue Scene"}),"\n",(0,r.jsxs)(n.p,{children:["Rename the original ",(0,r.jsx)(n.code,{children:"Button"})," node to ",(0,r.jsx)(n.code,{children:"ButtonTemplate"})," and set it to hidden."]}),"\n",(0,r.jsxs)(n.p,{children:["Create a new ",(0,r.jsx)(n.strong,{children:"HBoxContainer"})," node named ",(0,r.jsx)(n.code,{children:"Buttons"}),", and add a single Button as its child for layout adjustment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="Node tree"',children:"Dialogue <Control Node>\n  \u251c ColorRect\n  \u251c Speaker <Speaker Scene>\n  \u251c Content <RichTextLabel Node>\n  \u251c Buttons <HBoxContainer Node>\n  \u2502  \u2514 Button\n  \u2514 ButtonTemplate\n"})}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Create the ButtonTemplate",src:t(7548).A+"",width:"1918",height:"1026"})})}),"\n",(0,r.jsx)(n.h3,{id:"update-the-gdscript-1",children:"Update the GDScript"}),"\n",(0,r.jsxs)(n.p,{children:["Update the logic so that when ",(0,r.jsx)(n.code,{children:"says"})," or ",(0,r.jsx)(n.code,{children:"asks"})," signals are emitted, choices are automatically generated."]}),"\n",(0,r.jsxs)(n.p,{children:["To do this, use the ",(0,r.jsx)(n.code,{children:"set_choices"})," method to duplicate the ",(0,r.jsx)(n.code,{children:"ButtonTemplate"})," and create buttons for each choice."]}),"\n",(0,r.jsxs)(n.p,{children:["Also, by using ",(0,r.jsx)(n.code,{children:"continue_dialogue.bind(value)"}),", you can pre-bind the value that will be passed to the Fiber when a button is pressed."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",metastring:'title="dialogue.gd"',children:"func set_choices(choices: Dictionary = { 'Continue': null }) -> void:\n\tfor child in %Buttons.get_children(): child.queue_free()\n\tfor key in choices: add_choice(key, choices[key])\n\n\nfunc add_choice(str: String, value: Variant) -> void:\n\tvar btn = %ButtonTemplate.duplicate()\n\t%Buttons.add_child(btn)\n\tbtn.text = str\n\tbtn.pressed.connect(continue_dialogue.bind(value))\n\tbtn.show()\n\n\nfunc continue_dialogue(value) -> void:\n\tcontroller.perform('continue %s' % _value_for_rb(value))\n\tif controller.exception:\n\t\tprinterr(\"controller: %s\" % controller.exception)\n\n\nfunc clear(all: bool = false) -> void:\n\t%Speaker.hide()\n\t%Content.text = ''\n\tset_choices()\n\tif all: %Buttons.hide()\n\n\nfunc _value_for_rb(value: Variant) -> Variant:\n\tmatch typeof(value):\n\t\tTYPE_STRING_NAME: return ':%s' % value\n\t\tTYPE_STRING:      return '\"%s\"' % value\n\t\tTYPE_NIL:         return 'nil'\n\t\t_: return value\n\n\nfunc _handle(key: StringName, payload: Variant) -> void:\n\tmatch key:\n\t\t&'says':\n\t\t\tspeak(payload['name'], payload['content'], payload['face'])\n\t\t\tset_choices()\n\t\t&'asks':\n\t\t\tspeak(payload['name'], payload['content'], payload['face'])\n\t\t\tset_choices(payload['choices'])\n\t\t&'finished': clear(true)\n\t\t_: print_debug('[%s] %s', [key, payload])\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once you run it, you should see the choices appear as expected."}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Add choices",src:t(2356).A+"",width:"656",height:"398"})})}),"\n",(0,r.jsx)(n.h2,{id:"changing-background-image-or-bgm",children:"Changing Background Image or BGM"}),"\n",(0,r.jsx)(n.p,{children:"With what we've implemented so far, the dialogue system now supports the following features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Displaying text"}),"\n",(0,r.jsx)(n.li,{children:"Changing face graphics"}),"\n",(0,r.jsx)(n.li,{children:"Showing choices"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In addition to these, what if you want to add more dramatic efforts\u2014such as changing the background image or BGM?"}),"\n",(0,r.jsx)(n.h3,{id:"update-the-scenario-ver-4",children:"Update the Scenario (Ver. 4)"}),"\n",(0,r.jsxs)(n.p,{children:["Here, I'll introduce a new method ",(0,r.jsx)(n.code,{children:"scene :scene_name"})," to represent scene transitions, such as changing the background image.\nThis allows you to specify the timing of the transition directly within the scenario."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="scenario.rb"',children:'require \'path/to/helper\'\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n    says "Alice is resting in the field."\n    says "Suddenly, she hears a panicked voice from afar."\n\n  scene :riverbank\n\n  WhiteRabbit; got :flustered\n    says "I\'m late, I\'m late, I\'m late!"\n\n  Alice;\n    says "Hi! Where are you going?"\n\n  WhiteRabbit;\n    says "I\'m late, I\'m late, for a very important date!"\n\n  Alice; with :flustered\n    says "Wait!"\n\n  Narrator;\n    says "Alice chased after the rabbit."\n    says "But the rabbit disappeared into a burrow."\n\n  scene :burrow\n\n  Alice;\n    says "He went in here."\n    asks "Should I go in too?"\n    unless ___?\n      says "It looks so narrow and grimy... I really shouldn\'t."\n      until ___?\n        says "But I just can\'t stop wondering."\n        asks "Maybe I should go in after all?"\n      end\n    end\n    says "Alright, here goes!"\n\n  Narrator;\n    says "As Alice entered the burrow, the ground gave away and she fell down."\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Add the ",(0,r.jsx)(n.code,{children:"scene"})," method so that it emits a ",(0,r.jsx)(n.code,{children:"background"})," signal."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="helper.rb"',children:"class Dialogue\n  class << self\n    attr_accessor :current\n  end\n\n  attr_accessor :fiber, :last_value\n\n  def initialize(&block)\n    self.fiber = Fiber.new do\n      yield\n      Godot.emit_signal :finished, true\n    end\n    Dialogue.current = self\n  end\n\n  def continue(val = nil)\n    fiber.resume(val)\n  end\n\n  def listen!\n    self.last_value = Fiber.yield\n  end\n\n  def ___?\n    last_value\n  end\n\n  def scene(sym)\n    Godot.emit_signal :background, sym\n  end\nend\ndelegate Dialogue, :continue, :___?, :scene #\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update-the-gdscript-2",children:"Update the GDScript"}),"\n",(0,r.jsxs)(n.p,{children:["The implementation is omitted, but you should be able to change the background image by modifying the ",(0,r.jsx)(n.code,{children:"_handle"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gdscript",metastring:'title="dialogue.gd"',children:"func _handle(key: StringName, payload: Variant) -> void:\n\tmatch key:\n\t\t&'says':\n\t\t\tspeak(payload['name'], payload['content'], payload['face'])\n\t\t\tset_choices()\n\t\t&'asks':\n\t\t\tspeak(payload['name'], payload['content'], payload['face'])\n\t\t\tset_choices(payload['choices'])\n\t\t&'background': print_debug(\"TODO [background] %s\" % payload)\n\t\t&'finished': clear(true)\n\t\t_: print_debug('[%s] %s', [key, payload])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"refining-the-dsl",children:"Refining the DSL"}),"\n",(0,r.jsxs)(n.p,{children:["As the content displayed in the dialogue grows longer, some of you may start to feel that the DSL-specific keywords like ",(0,r.jsx)(n.code,{children:"says"}),", ",(0,r.jsx)(n.code,{children:"asks"})," and ",(0,r.jsx)(n.code,{children:"scene"})," are beginning to feel like noice."]}),"\n",(0,r.jsxs)(n.p,{children:["At first, I liked the idea of writing readable sentences like ",(0,r.jsx)(n.code,{children:'(Charater) say "(Line)"'}),", something you could almost speak aloud. But what truly matters is making it easy to write the character and their line."]}),"\n",(0,r.jsx)(n.p,{children:"So, how can we reduce the noise?"}),"\n",(0,r.jsx)(n.h3,{id:"update-the-scenario-ver-5",children:"Update the Scenario (Ver. 5)"}),"\n",(0,r.jsxs)(n.p,{children:["By using operator overloading, we can eliminate the need to explicitly write ",(0,r.jsx)(n.code,{children:"says"}),", ",(0,r.jsx)(n.code,{children:"asks"}),", or ",(0,r.jsx)(n.code,{children:"scene"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's add the following to ",(0,r.jsx)(n.code,{children:"helper.rb"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="helper.rb"',children:"module SymbolExt\n  def ~@\n    scene self\n  end\nend\nSymbol.prepend SymbolExt\n\nmodule StringExt\n  def -@\n    says self\n  end\n\n  def !@\n    asks self\n  end\nend\nString.prepend StringExt\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each operator now acts as an alias:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'says "content"'})," becomes ",(0,r.jsx)(n.code,{children:'- "content"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'asks "content"'})," becomes ",(0,r.jsx)(n.code,{children:'! "content"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scene :scene_name"})," becomes ",(0,r.jsx)(n.code,{children:"~ :scene_name"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's how the revised scenario looks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="scenario.rb"',children:'require \'path/to/helper\'\nDialogue.new do\n  speakers %w(Narrator WhiteRabbit Alice)\n\n  Narrator;\n  - "Alice is resting in the field."\n  - "Suddenly, she hears a panicked voice from afar."\n\n  ~ :riverbank\n\n  WhiteRabbit; got :flustered\n  - "I\'m late, I\'m late, I\'m late!"\n  Alice;\n  - "Hi! Where are you going?"\n  WhiteRabbit;\n  - "I\'m late, I\'m late, for a very important date!"\n  Alice; with :flustered\n  - "Wait!"\n  Narrator;\n  - "Alice chased after the rabbit."\n  - "But the rabbit disappeared into a burrow."\n\n  ~ :burrow\n\n  Alice;\n  - "He went in here."\n  ! "Should I go in too?"\n  unless ___?\r\n    - "It looks so narrow and grimy... I really shouldn\'t."\r\n    until ___?\r\n      - "But I just can\'t stop wondering."\r\n      ! "Maybe I should go in after all?"\r\n    end\r\n  end\r\n  - "Alright, here goes!"\n\n  Narrator;\n  - "As Alice entered the burrow, the ground gave way and she fell down."\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"What do you think? By using operators, we've made the syntax more compact while keeping it readable.\nIt's hard to believe this is still Ruby\u2014it almost feels a plain-text format designed specially for dialogue systems."}),"\n",(0,r.jsx)(n.p,{children:"Of cource, someone seeing this for the first time might not immediately grasp what each operator means or how it bahaves."}),"\n",(0,r.jsx)(n.p,{children:"But compared to third-party dialogue systems, this approach offers a major advantage: you got to define the grammar yourself.\nThere's no need to memorize awkward syntax or learn special embedded formats for control flow or variables.\nIf something doesn't feel right, you can reshape it to fit your hand."}),"\n",(0,r.jsx)(n.p,{children:"No need to write a parser\u2014you can define your own grammar freely.\nRuby will likely respond flexibly to the kind of game you want to create."}),"\n",(0,r.jsxs)(n.p,{children:["You can check out the demo we created here:\n",(0,r.jsx)(n.a,{href:"https://github.com/tkmfujise/redscribe-docs-demo/tree/main/src/08.dialogue_refined",children:"https://github.com/tkmfujise/redscribe-docs-demo/tree/main/src/08.dialogue_refined"})]}),"\n",(0,r.jsx)(n.p,{children:"If you're having trouble getting it to work, feel free to use the above as a reference."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);