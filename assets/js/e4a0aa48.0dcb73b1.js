"use strict";(globalThis.webpackChunkredscribe_docs=globalThis.webpackChunkredscribe_docs||[]).push([[1097],{71:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"using_fiber","title":"Using Fiber","description":"What is Fiber?","source":"@site/docs/07.using_fiber.md","sourceDirName":".","slug":"/using_fiber","permalink":"/redscribe-docs/docs/using_fiber","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"Using Fiber"},"sidebar":"tutorialSidebar","previous":{"title":"Create Ruby files","permalink":"/redscribe-docs/docs/create_ruby_files"},"next":{"title":"Example 2: Dialogue Controller","permalink":"/redscribe-docs/docs/example2_dialogue"}}');var n=s(4848),t=s(8453);const a={sidebar_label:"Using Fiber"},l="Using Fiber",d={},c=[{value:"What is Fiber?",id:"what-is-fiber",level:2},{value:"Fiber.yield Arguments and Return Values",id:"fiberyield-arguments-and-return-values",level:2}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"using-fiber",children:"Using Fiber"})}),"\n",(0,n.jsx)(r.h2,{id:"what-is-fiber",children:"What is Fiber?"}),"\n",(0,n.jsxs)(r.p,{children:["Ruby provides a class called ",(0,n.jsx)(r.a,{href:"https://docs.ruby-lang.org/en/master/Fiber.html",children:"Fiber"})," for working with coroutines."]}),"\n",(0,n.jsx)(r.p,{children:"A coroutine is a mechanism that allows you to pause execution and later resume it from where it left off."}),"\n",(0,n.jsxs)(r.p,{children:["In some languages, asynchronous operation using ",(0,n.jsx)(r.code,{children:"async/await"})," are referred to as coroutines.\nHowever, Ruby's ",(0,n.jsx)(r.code,{children:"Fiber"})," uses ",(0,n.jsx)(r.code,{children:"yield"})," and ",(0,n.jsx)(r.code,{children:"resume"})," to pause and resume execution."]}),"\n",(0,n.jsxs)(r.p,{children:["To create a Fiber, use ",(0,n.jsx)(r.code,{children:"Fiber.new"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Note that simply calling ",(0,n.jsx)(r.code,{children:"Fiber.new"})," does not start execution.\nLet's try it out using the REPL."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber = Fiber.new do\r\n  Godot.emit_signal :fiber, 'started'\r\n  Fiber.yield\r\n  Godot.emit_signal :fiber, 'resumed'\r\nend\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="Output"',children:'=> "#<Fiber:0x1ab31c76030 (created)>"\n'})}),"\n",(0,n.jsxs)(r.p,{children:["To start execution, call ",(0,n.jsx)(r.code,{children:"resume"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber.resume\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="Output"',children:"[ fiber ] signal emitted: 'started'\r\n=> <null>\n"})}),"\n",(0,n.jsxs)(r.p,{children:["When ",(0,n.jsx)(r.code,{children:"Fiber.yield"})," is called, execution is paused at that point.\nTo resume, call ",(0,n.jsx)(r.code,{children:"resume"})," again."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber.resume\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="Output"',children:"[ fiber ] signal emitted: 'resumed'\r\n=> true\n"})}),"\n",(0,n.jsx)(r.h2,{id:"fiberyield-arguments-and-return-values",children:"Fiber.yield Arguments and Return Values"}),"\n",(0,n.jsxs)(r.p,{children:["The arguments passed to ",(0,n.jsx)(r.code,{children:"Fiber.yield"})," will be returned when ",(0,n.jsx)(r.code,{children:"resume"})," is called."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber = Fiber.new do\n  value = Fiber.yield 'started'\n  Godot.emit_signal :fiber, value\nend\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber.resume\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="Output"',children:'=> "started"\n'})}),"\n",(0,n.jsxs)(r.p,{children:["The arguments passed to ",(0,n.jsx)(r.code,{children:"resume"})," become the return values of ",(0,n.jsx)(r.code,{children:"Fiber.yield"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"@fiber.resume 'hello'\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-txt",metastring:'title="Output"',children:'[ fiber ] signal emitted: "hello"\n=> true\n'})}),"\n",(0,n.jsx)(r.p,{children:"By using coroutines, you can pause and resume execution at arbitary points\u2014making it possible to build systems like a dialogue system."}),"\n",(0,n.jsx)(r.p,{children:"In the next chapter, we'll build a dialogue system example using Fiber."})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);